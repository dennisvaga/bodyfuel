// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://prisly.cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------- Product ----------------------------------

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  slug        String
  sku         String?
  description String?
  brand       String?
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  price       Float
  quantity    Int              @default(0)
  is_demo     Boolean          @default(false) // True = demo product, False = user-added product
  images      ProductImage[]
  cartItems   CartItem[]
  collections Collection[]
  variants    ProductVariant[] // Contains VariantOptionValue model that combines option + OptionValue
  options     ProductOption[]
  OrderItems  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageKey  String
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

// (.e.g. stock: 50 price: 20 variantOptionValue:["chocolate", "50 servings"])
// Join table 'variantOptionValues' holds the records of the,
// 'option values' that belongs to this variant.
model ProductVariant {
  id                  Int                         @id @default(autoincrement())
  productId           Int
  product             Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
  // sku              String?
  price               Float
  stock               Int
  variantOptionValues ProductVariantOptionValue[]
  cartItems           CartItem[] // Cart items using this variant
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt

  @@map("product_variants")
}

// ("10 serv", "chocolate")
model ProductOptionValue {
  id                  Int                         @id @default(autoincrement())
  value               String // e.g., "chocolate," "vanilla"
  optionId            Int
  option              ProductOption               @relation(fields: [optionId], references: [id], onDelete: Cascade)
  variantOptionValues ProductVariantOptionValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Product can have only 1 unique option value
  @@unique([optionId, value])
  @@map("product_option_values")
}

// ("servings", "flavour")
model ProductOption {
  id           Int                  @id @default(autoincrement())
  name         String
  productId    Int
  product      Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  optionValues ProductOptionValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Product can have only 1 unique option
  @@unique([productId, name])
  @@map("product_options")
}

// Junction table
// Each variant is a combination of 'option values'
// So this table maps these `option values` to a specific variant.
model ProductVariantOptionValue {
  id            Int                @id @default(autoincrement())
  variantId     Int // Links to the specific product variant
  variant       ProductVariant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  optionValueId Int // Links to the specific option value (e.g., 10 serv, chocolate)
  optionValue   ProductOptionValue @relation(fields: [optionValueId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_variant_option_values")
}

// -------------- Category ----------------------------------

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// -------------- Collection ----------------------------------

model Collection {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
  is_demo     Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Self-referential relationship for nesting (sub category)
  parentId Int?
  parent   Collection?  @relation("ParentChild", fields: [parentId], references: [id])
  children Collection[] @relation("ParentChild")

  // Tags relationship (Instead type field is used)
  // tags        Tag[]      @relation("CollectionTags")
}

// model Tag {
//   id          Int          @id @default(autoincrement())
//   name        String       @unique
//   collections Collection[] @relation("CollectionTags")
// }

// -------------- Cart ----------------------------------

model Cart {
  id        Int        @id @default(autoincrement())
  sessionId String     @unique @default(uuid()) // Unique session identifier (UUID)
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id])
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Each cartItem represent a product with optional variant
model CartItem {
  id        Int             @id @default(autoincrement()) // Unique identifier for each cart item
  cartId    Int
  cart      Cart            @relation(fields: [cartId], references: [id])
  productId Int
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId Int? // Optional: specific variant of the product
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity  Int             @default(1)
  price     Float // Price at the time of adding to cart

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
}

// -------------- Order ----------------------------------
model Order {
  id          String      @id @default(uuid())
  // Execute this in DB to change sequence starting point:
  // ALTER SEQUENCE "Order_orderNumber_seq" RESTART WITH 1000;
  orderNumber Int         @unique @default(autoincrement()) // Starts from #1000
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  email       String
  total       Float
  status      OrderStatus @default(PENDING)
  orderItems  OrderItem[]
  is_demo     Boolean     @default(false)

  shippingInfoId String?
  shippingInfo   ShippingInfo? @relation(fields: [shippingInfoId], references: [id])

  shippingMethod    String?
  shippingCost      Float?
  estimatedDelivery DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id      Int    @id @default(autoincrement())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  quantity Int   @default(1)
  price    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  CANCELLED
}

model ShippingInfo {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  company    String?
  address    String
  apartment  String?
  city       String
  state      String?
  postalCode String // Works for both ZIP and Postal Code
  countryId  Int
  country    Country @relation(fields: [countryId], references: [id])
  phone      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order[]
}

model Country {
  id                  Int     @id @default(autoincrement())
  code                String  @unique
  name                String
  isShippingAvailable Boolean @default(true)
  displayOrder        Int     @default(999)

  ShippingInfo ShippingInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("countries")
}

// -------------- Auth.js model----------------------------------
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime

  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  password      String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  Order         Order[]
  // conversations Conversation[] 

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// -------------- Chatbot Models ----------------------------------

// model Conversation {
//   id       String    @id @default(uuid())
//   userId   String? // Optional: Link to a user if authenticated
//   user     User?     @relation(fields: [userId], references: [id])
//   messages Message[] // Relation to Message model

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("conversations")
// }

// model Message {
//   id             String       @id @default(uuid())
//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
//   role           String // e.g., "user", "assistant"
//   content        String       @db.Text
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @updatedAt

//   @@map("messages")
// }
